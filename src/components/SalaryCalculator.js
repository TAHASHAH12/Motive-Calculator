import React, { useState, useEffect } from 'react';
import './SalaryCalculator.css';

const SalaryCalculator = () => {
  const [employeeData, setEmployeeData] = useState({
    name: '',
    baseSalary: 0,
    workingDays: 22, // Default working days in a month
    actualWorkingDays: 0,
    extraMileHours: 0,
    hourlyRate: 0,
    extraMileRate: 0, // 2x hourly rate
    qaScore: 0,
    performanceBonus: 0
  });

  const [salaryBreakdown, setSalaryBreakdown] = useState({
    basicSalary: 0,
    extraMilePay: 0,
    performanceBonus: 0,
    totalSalary: 0,
    deductions: 0,
    netSalary: 0
  });

  // Calculate hourly rate based on base salary
  useEffect(() => {
    const hourlyRate = employeeData.baseSalary / (employeeData.workingDays * 8); // 8 hours per day
    const extraMileRate = hourlyRate * 2; // 2x for extra mile
    
    setEmployeeData(prev => ({
      ...prev,
      hourlyRate,
      extraMileRate
    }));
  }, [employeeData.baseSalary, employeeData.workingDays]);

  // Calculate salary breakdown
  useEffect(() => {
    const basicSalary = (employeeData.actualWorkingDays / employeeData.workingDays) * employeeData.baseSalary;
    const extraMilePay = employeeData.extraMileHours * employeeData.extraMileRate;
    
    // Performance bonus based on QA score
    let performanceBonus = 0;
    if (employeeData.qaScore >= 95) {
      performanceBonus = basicSalary * 0.1; // 10% bonus for excellent performance
    } else if (employeeData.qaScore >= 85) {
      performanceBonus = basicSalary * 0.05; // 5% bonus for good performance
    }

    const totalSalary = basicSalary + extraMilePay + performanceBonus;
    const deductions = totalSalary * 0.02; // 2% for tax/deductions
    const netSalary = totalSalary - deductions;

    setSalaryBreakdown({
      basicSalary,
      extraMilePay,
      performanceBonus,
      totalSalary,
      deductions,
      netSalary
    });
  }, [employeeData]);

  const handleInputChange = (field, value) => {
    setEmployeeData(prev => ({
      ...prev,
      [field]: parseFloat(value) || 0
    }));
  };

  const handleStringInputChange = (field, value) => {
    setEmployeeData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const resetCalculator = () => {
    setEmployeeData({
      name: '',
      baseSalary: 0,
      workingDays: 22,
      actualWorkingDays: 0,
      extraMileHours: 0,
      hourlyRate: 0,
      extraMileRate: 0,
      qaScore: 0,
      performanceBonus: 0
    });
  };

  const exportSalarySlip = () => {
    const currentDate = new Date();
    const salarySlip = `
═══════════════════════════════════════
                MOTIVE SALARY SLIP
═══════════════════════════════════════

Employee: ${employeeData.name}
Month: ${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
Generated: ${currentDate.toLocaleDateString('en-US')}

═══════════════════════════════════════
                   EARNINGS
═══════════════════════════════════════

Basic Salary (${employeeData.actualWorkingDays}/${employeeData.workingDays} days)
                              PKR ${salaryBreakdown.basicSalary.toLocaleString()}

Extra Mile Pay (${employeeData.extraMileHours} hours @ PKR ${employeeData.extraMileRate.toFixed(2)}/hr)
                              PKR ${salaryBreakdown.extraMilePay.toLocaleString()}

Performance Bonus (QA Score: ${employeeData.qaScore}%)
                              PKR ${salaryBreakdown.performanceBonus.toLocaleString()}

═══════════════════════════════════════
                  DEDUCTIONS
═══════════════════════════════════════

Tax & Other Deductions (2%)
                              PKR ${salaryBreakdown.deductions.toLocaleString()}

═══════════════════════════════════════
                    TOTAL
═══════════════════════════════════════

Gross Salary:           PKR ${salaryBreakdown.totalSalary.toLocaleString()}
Net Salary:             PKR ${salaryBreakdown.netSalary.toLocaleString()}

═══════════════════════════════════════

Note: Extra mile work is compensated at 2x the hourly rate.
Performance bonuses are based on QA scores:
• 95%+: 10% bonus
• 85-94%: 5% bonus
• Below 85%: No bonus

Generated by Motive Employee Calculator
`;

    // Create and download the salary slip
    const element = document.createElement('a');
    const file = new Blob([salarySlip], { type: 'text/plain; charset=utf-8' });
    element.href = URL.createObjectURL(file);
    element.download = `Motive_Salary_Slip_${employeeData.name.replace(/\s+/g, '_')}_${currentDate.getMonth() + 1}_${currentDate.getFullYear()}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const getBonusInfo = (qaScore) => {
    if (qaScore >= 95) return { rate: '10%', class: 'excellent' };
    if (qaScore >= 85) return { rate: '5%', class: 'good' };
    return { rate: '0%', class: 'none' };
  };

  return (
    <div className="salary-calculator">
      <div className="calculator-header">
        <div className="header-left">
          <h2>Monthly Salary Calculator</h2>
          <p>Calculate your monthly salary with extra mile compensation</p>
        </div>
        <button className="reset-btn" onClick={resetCalculator}>
          <span>🔄</span>
          Reset
        </button>
      </div>

      <div className="calculator-content">
        <div className="input-section">
          <div className="section-card">
            <h3>Employee Information</h3>
            <div className="input-grid">
              <div className="input-field full-width">
                <label>Employee Name</label>
                <input
                  type="text"
                  value={employeeData.name}
                  onChange={(e) => handleStringInputChange('name', e.target.value)}
                  placeholder="Enter employee name"
                />
              </div>

              <div className="input-field">
                <label>Base Monthly Salary (PKR)</label>
                <input
                  type="number"
                  min="0"
                  value={employeeData.baseSalary}
                  onChange={(e) => handleInputChange('baseSalary', e.target.value)}
                  placeholder="0"
                />
              </div>

              <div className="input-field">
                <label>Standard Working Days</label>
                <input
                  type="number"
                  min="1"
                  max="31"
                  value={employeeData.workingDays}
                  onChange={(e) => handleInputChange('workingDays', e.target.value)}
                />
              </div>

              <div className="input-field">
                <label>Actual Working Days</label>
                <input
                  type="number"
                  min="0"
                  max={employeeData.workingDays}
                  value={employeeData.actualWorkingDays}
                  onChange={(e) => handleInputChange('actualWorkingDays', e.target.value)}
                />
              </div>

              <div className="input-field">
                <label>Extra Mile Hours</label>
                <input
                  type="number"
                  min="0"
                  value={employeeData.extraMileHours}
                  onChange={(e) => handleInputChange('extraMileHours', e.target.value)}
                  placeholder="0"
                />
              </div>

              <div className="input-field">
                <label>QA Score (%)</label>
                <input
                  type="number"
                  min="0"
                  max="100"
                  value={employeeData.qaScore}
                  onChange={(e) => handleInputChange('qaScore', e.target.value)}
                  placeholder="0"
                />
              </div>
            </div>

            <div className="rate-info">
              <div className="rate-card">
                <div className="rate-label">Hourly Rate</div>
                <div className="rate-value">PKR {employeeData.hourlyRate.toLocaleString()}</div>
              </div>
              <div className="rate-card extra-mile">
                <div className="rate-label">Extra Mile Rate (2x)</div>
                <div className="rate-value">PKR {employeeData.extraMileRate.toLocaleString()}</div>
              </div>
              <div className={`rate-card bonus ${getBonusInfo(employeeData.qaScore).class}`}>
                <div className="rate-label">Performance Bonus</div>
                <div className="rate-value">{getBonusInfo(employeeData.qaScore).rate}</div>
              </div>
            </div>
          </div>
        </div>

        <div className="results-section">
          <div className="salary-card">
            <h3>Salary Breakdown</h3>
            
            <div className="earnings-section">
              <h4>💰 Earnings</h4>
              <div className="breakdown-item">
                <span className="breakdown-label">Basic Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.basicSalary.toLocaleString()}</span>
              </div>
              
              <div className="breakdown-item">
                <span className="breakdown-label">Extra Mile Pay</span>
                <span className="breakdown-value extra">PKR {salaryBreakdown.extraMilePay.toLocaleString()}</span>
              </div>
              
              <div className="breakdown-item">
                <span className="breakdown-label">Performance Bonus</span>
                <span className="breakdown-value bonus">PKR {salaryBreakdown.performanceBonus.toLocaleString()}</span>
              </div>
              
              <div className="breakdown-item subtotal">
                <span className="breakdown-label">Gross Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.totalSalary.toLocaleString()}</span>
              </div>
            </div>

            <div className="deductions-section">
              <h4>📋 Deductions</h4>
              <div className="breakdown-item">
                <span className="breakdown-label">Tax & Others (2%)</span>
                <span className="breakdown-value deduction">-PKR {salaryBreakdown.deductions.toLocaleString()}</span>
              </div>
            </div>

            <div className="total-section">
              <div className="breakdown-item total">
                <span className="breakdown-label">Net Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.netSalary.toLocaleString()}</span>
              </div>
            </div>

            <div className="bonus-criteria">
              <h4>🎯 Bonus Criteria</h4>
              <div className="criteria-list">
                <div className="criteria-item excellent">95%+ QA Score → 10% bonus</div>
                <div className="criteria-item good">85-94% QA Score → 5% bonus</div>
                <div className="criteria-item none">Below 85% → No bonus</div>
              </div>
            </div>

            <button 
              className="export-btn" 
              onClick={exportSalarySlip}
              disabled={!employeeData.name}
            >
              <span>📄</span>
              Export Salary Slip
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SalaryCalculator;
