import React, { useState, useCallback } from 'react';
import { useSalaryCalculations } from '../hooks/useCalculations';
import './SalaryCalculator.css';

const SalaryCalculator = () => {
  const [employeeData, setEmployeeData] = useState({
    name: '',
    totalGrossSalary: 0, // Renamed from baseSalary
    workingDays: 22,
    actualWorkingDays: 0,
    extraMileHours: 0
    // Removed qaScore
  });

  const salaryBreakdown = useSalaryCalculations(employeeData);

  const handleInputChange = useCallback((field, value) => {
    setEmployeeData(prev => ({
      ...prev,
      [field]: field === 'name' ? value : Math.max(0, parseFloat(value) || 0)
    }));
  }, []);

  const resetCalculator = useCallback(() => {
    setEmployeeData({
      name: '',
      totalGrossSalary: 0,
      workingDays: 22,
      actualWorkingDays: 0,
      extraMileHours: 0
    });
  }, []);

  const exportSalarySlip = useCallback(() => {
    if (!employeeData.name.trim()) {
      alert('Please enter employee name before exporting salary slip.');
      return;
    }

    const currentDate = new Date();
    const salarySlip = `
═══════════════════════════════════════
                MOTIVE SALARY SLIP
═══════════════════════════════════════

Employee: ${employeeData.name}
Month: ${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
Generated: ${currentDate.toLocaleDateString('en-US')}

═══════════════════════════════════════
                   EARNINGS
═══════════════════════════════════════

Basic Salary (${employeeData.actualWorkingDays}/${employeeData.workingDays} days)
                              PKR ${salaryBreakdown.basicSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}

Extra Mile Pay (${employeeData.extraMileHours} hours @ PKR ${salaryBreakdown.extraMileRate.toLocaleString('en-US', { maximumFractionDigits: 2 })}/hr)
                              PKR ${salaryBreakdown.extraMilePay.toLocaleString('en-US', { maximumFractionDigits: 2 })}

═══════════════════════════════════════
                    TOTAL
═══════════════════════════════════════

Net Salary:             PKR ${salaryBreakdown.netSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}

═══════════════════════════════════════

Generated by Motive Employee Calculator
`;

    try {
      const element = document.createElement('a');
      const file = new Blob([salarySlip], { type: 'text/plain; charset=utf-8' });
      element.href = URL.createObjectURL(file);
      element.download = `Motive_Salary_Slip_${employeeData.name.replace(/\s+/g, '_')}_${currentDate.getMonth() + 1}_${currentDate.getFullYear()}.txt`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error('Error generating salary slip:', error);
      alert('Error generating salary slip. Please try again.');
    }
  }, [employeeData, salaryBreakdown]);

  return (
    <div className="salary-calculator">
      <div className="calculator-header">
        <div className="header-left">
          <h2>Monthly Salary Calculator</h2>
          <p>Calculate your monthly salary with extra mile compensation</p>
        </div>
        <button className="reset-btn" onClick={resetCalculator}>
          <span>🔄</span>
          Reset
        </button>
      </div>

      <div className="calculator-content">
        <div className="input-section">
          <div className="section-card">
            <h3>Employee Information</h3>
            <div className="input-grid">
              <div className="input-field full-width">
                <label>Employee Name</label>
                <input
                  type="text"
                  value={employeeData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="Enter employee name"
                />
              </div>

              <div className="input-field">
                <label>Total Gross Salary (PKR)</label>
                <input
                  type="number"
                  min="0"
                  value={employeeData.totalGrossSalary}
                  onChange={(e) => handleInputChange('totalGrossSalary', e.target.value)}
                  placeholder="0"
                />
              </div>

              <div className="input-field">
                <label>Standard Working Days</label>
                <input
                  type="number"
                  min="1"
                  max="31"
                  value={employeeData.workingDays}
                  onChange={(e) => handleInputChange('workingDays', e.target.value)}
                />
              </div>

              <div className="input-field">
                <label>Actual Working Days</label>
                <input
                  type="number"
                  min="0"
                  max={employeeData.workingDays}
                  value={employeeData.actualWorkingDays}
                  onChange={(e) => handleInputChange('actualWorkingDays', e.target.value)}
                />
              </div>

              <div className="input-field">
                <label>Extra Mile Hours</label>
                <input
                  type="number"
                  min="0"
                  value={employeeData.extraMileHours}
                  onChange={(e) => handleInputChange('extraMileHours', e.target.value)}
                  placeholder="0"
                />
              </div>
            </div>

            <div className="rate-info">
              <div className="rate-card">
                <div className="rate-label">Hourly Rate</div>
                <div className="rate-value">PKR {salaryBreakdown.hourlyRate.toLocaleString('en-US', { maximumFractionDigits: 2 })}</div>
              </div>
              <div className="rate-card extra-mile">
                <div className="rate-label">Extra Mile Rate (2x)</div>
                <div className="rate-value">PKR {salaryBreakdown.extraMileRate.toLocaleString('en-US', { maximumFractionDigits: 2 })}</div>
              </div>
            </div>
          </div>
        </div>

        <div className="results-section">
          <div className="salary-card">
            <h3>Salary Breakdown</h3>
            
            <div className="earnings-section">
              <h4>💰 Earnings</h4>
              <div className="breakdown-item">
                <span className="breakdown-label">Basic Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.basicSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}</span>
              </div>
              
              <div className="breakdown-item">
                <span className="breakdown-label">Extra Mile Pay</span>
                <span className="breakdown-value extra">PKR {salaryBreakdown.extraMilePay.toLocaleString('en-US', { maximumFractionDigits: 2 })}</span>
              </div>
              
              <div className="breakdown-item subtotal">
                <span className="breakdown-label">Total Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.netSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}</span>
              </div>
            </div>

            <div className="total-section">
              <div className="breakdown-item total">
                <span className="breakdown-label">Net Salary</span>
                <span className="breakdown-value">PKR {salaryBreakdown.netSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}</span>
              </div>
            </div>

            <button 
              className="export-btn" 
              onClick={exportSalarySlip}
              disabled={!employeeData.name.trim()}
            >
              <span>📄</span>
              Export Salary Slip
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SalaryCalculator;
